\" Define path to scripts
.ds scriptdir bin

\" Define project URL
.ds lcovurl https://github.com/linux\-test\-project/lcov

.TH genhtml 1 "LCOV 2.0" 2023\-05\-17 "User Manuals"
.SH NAME
genhtml \- Generate HTML view from LCOV coverage data files
.SH SYNOPSIS
.B genhtml
.RB [ \-h | \-\-help ]
.RB [ \-\-version ]
.RS 8
.br
.RB [ \-q | \-\-quiet ]
.RB [ \-v | \-\-verbose ]
.RB [ \-\-debug ]
.br
.RB [ \-s | \-\-show\-details ]
.br
.RB [ \-f | \-\-frames ]
.br
.RB [ \-b | \-\-baseline\-file
.IR baseline\-file\-pattern ]
.br
.RB [ \-o | \-\-output\-directory
.IR output\-directory ]
.br
.RB [ \-\-header-title
.IR banner ]
.br
.RB [ \-\-footer
.IR string ]
.br
.RB [ \-t | \-\-title
.IR title ]
.br
.RB [ \-d | \-\-description\-file
.IR description\-file ]
.br
.RB [ \-k | \-\-keep\-descriptions ]
.RB [ \-c | \-\-css\-file
.IR css\-file ]
.br
.RB [ \-p | \-\-prefix
.IR prefix ]
.RB [ \-\-no\-prefix ]
.br
.RB [ \-\-source\-directory
.IR dirname ]
.br
.RB [ \-\-no\-source ]
.RB [ \-\-num\-spaces
.IR num ]
.RB [ \-\-highlight ]
.br
.RB [ \-\-legend ]
.RB [ \-\-html\-prolog
.IR prolog\-file ]
.br
.RB [ \-\-html\-epilog
.IR epilog\-file ]
.RB [ \-\-html\-extension
.IR extension ]
.br
.RB [ \-\-html\-gzip ]
.RB [ \-\-sort ]
.RB [ \-\-no\-sort ]
.br
.RB [ \-\-function\-coverage ]
.RB [ \-\-no\-function\-coverage ]
.br
.RB [ \-\-branch\-coverage ]
.RB [ \-\-no\-branch\-coverage ]
.br
.RB [ \-\-demangle\-cpp
.IR [ param ] ]
.br
.RB [ \-\-ignore\-errors
.IR errors  ]
.br
.RB [ \-\-keep\-going ]
.RB [ \-\-config\-file
.IR config\-file ]
.RB [ \-\-rc
.IR keyword = value ]
.br
.RB [ \-\-precision
.IR num ]
.RB [ \-\-missed ]
.br
.RB [ \-\-suppress\-aliases ]
.br
.RB [ \-\-forget\-test\-names ]
.br
.RB [ \-\-dark\-mode ]
.br
.RB [ \-\-baseline\-title
.IR title ]
.br
.RB [ \-\-baseline\-date
.IR date ]
.br
.RB [ \-\-current\-date
.IR date ]
.br
.RB [ \-\-diff\-file
.IR diff\-file ]
.br
.RB [ \-\-annotate\-script
.IR script ]
.br
.RB [ \-\-criteria\-script
.IR script ]
.br
.RB [ \-\-version\-script
.IR script  ]
.br
.RB [ \-\-resolve\-script
.IR script  ]
.br
.RB [ \-\-checksum ]
.br
.RB [ \-\-new\-file\-as\-baseline ]
.br
.RB [ \-\-elide\-path\-mismatch ]
.br
.RB [ \-\-synthesize\-missing ]
.br
.RB [ \-\-date\-bins
.IR day[,day,...]]
.br
.RB [ \-\-show\-owners
.IR [ all ] ]
.br
.RB [ \-\-show\-noncode ]
.br
.RB [ \-\-show\-zero\-columns ]
.br
.RB [ \-\-show\-navigation ]
.br
.RB [ \-\-show\-proportions ]
.br
.RB [ \-\-simplified-colors ]
.br
.RB [ \-\-hierarchical ]
.RB [ \-\-flat ]
.br
.RB [ \-\-filter
.IR filters ]
.br
.RB [ \-\-include
.IR glob_pattern ]
.br
.RB [ \-\-exclude
.IR glob_pattern ]
.br
.RB [ \-\-erase\-functions
.IR regexp_pattern ]
.br
.RB [ \-\-substitute
.IR regexp_pattern ]
.br
.RB [ \-\-omit\-lines
.IR regexp_pattern ]
.br
.RB [ \-\-parallel | -j
.IR [integer] ]
.br
.RB [ \-\-memory
.IR integer_num_Mb ]
.br
.RB [ \-\-tempdir
.IR dirname ]
.br
.RB [ \-\-preserve ]
.br
.RB [ \-\-save ]
.br
.IR tracefile_pattern(s)
.RE
.SH DESCRIPTION

.B genhtml
creates an HTML view of coverage data found in tracefiles
.B geninfo
and
.B lcov
tools which are found from glob-match pattern(s)
.I tracefile_pattern.
 Features include:

.IP \(bu 3
Differential coverage comparison against baseline coverage data
.PP
.IP \(bu 3
Annotation of reports with date and owner information ("binning")
.PP

The basic concepts of differential coverage and date/owner binning are described in the paper found at
.I https://arxiv.org/abs/2008.07947

.SS Differential coverage

Differential coverage compares two versions of source code - the baseline and the current versions - and the coverage results for each to segment the code into categories.
.br

To create a differential coverage report,
.B genhtml
requires

.IP 1. 3
one or more
.I baseline\-files
specified via
.BR \-\-baseline\-file ,
and
.PP
.IP 2. 3
a patch file in unified format specified using
.BR \-\-diff\-file .
.PP
.br

Both
.I tracefile_pattern
and
.I baseline\-file
are treated as glob patterns which match one or more files.
.br

The difference in coverage between the set of
.I tracefiles
and
.I baseline\-files
is classified line-by-line into categories based on changes in 2 aspects:

.IP 1. 3
.BR "Test coverage results" :
a line of code can be tested (1), untested (0),
or unused (#). An unused line is a source code line that has no associated
coverage data, for example due to a disabled #ifdef statement.
.br
.PP

.IP 2. 3
.BR "Source code changes" :
a line can be unchanged, added (+\ =>), or removed (=>\ \-).
Note that the diff-file format used by
.B genhtml
reports changes in lines as removal of old line and addition of new line.
.br
.PP

Below are the resulting 12 categories, sorted by priority (assuming that untested code is more interesting than tested code, and new code is more interesting than old code):
.br

.RE
.B UNC
.RS
Uncovered New Code (+ => 0): newly added code is not tested.
.br
.RE

.B LBC
.RS
Lost Baseline Coverage (1 => 0): unchanged code is no longer tested.
.br
.RE

.B UIC
.RS
Uncovered Included Code (# => 0): previously unused code is untested.
.br
.RE

.B UBC
.RS
Uncovered Baseline Code (0 => 0): unchanged code was untested before, is untested now.
.br
.RE

.B GBC
.RS
Gained Baseline Coverage (0 => 1): unchanged code is tested now.
.br
.RE

.B GIC
.RS
Gained Included Coverage (# => 1): previously unused code is tested now.
.br
.RE

.B GNC
.RS
Gained New Coverage (+ => 1): newly added code is tested.
.br
.RE

.B CBC
.RS
Covered Baseline Code (1 => 1): unchanged code was tested before and is still tested.
.br
.RE

.B EUB
.RS
Excluded Uncovered Baseline (0 => #): previously untested code is unused now.
.br
.RE

.B ECB
.RS
Excluded Covered Baseline (1 => #): previously tested code is unused now.
.br
.RE

.B DUB
.RS
Deleted Uncovered Baseline (0 => \-): previously untested code has been deleted.
.br

Note: Because these lines are not represented in the current source version,
they are only represented in the classification summary table.
.RE

.B DCB
.RS
Deleted Covered Baseline (1 => \-): previously tested code has been deleted.
.br

Note: Because these lines are not represented in the current source version,
they are only represented in the classification summary table.
.br
.RE

The differential coverage report colorizes categorized regions in the source code view using unique colors for each.  You can use the
.B \-\-simplified\-colors
option to instead use one color for 'covered' code and another for 'uncovered'.

.SS Date and owner binning

.B "Date binning"
annotates coverage reports with age-of-last-change information to distinguish
recently added or modified code which has not been tested from older, presumed
stable code which is also not tested.
.B "Owner binning"
adds annotation identifying the author of changes.
.br

Both age and ownership reporting can be used to enhance team efforts to maintain
good coverage discipline by spotlighting coverage shortfalls in recently
modified code, even in the absence of baseline coverage data.
.br

To enable date and owner binning, the
.B \-\-annotate\-script
option must be used to specify a script that provides source code line age and
ownership information.
.br

For each source line, age is the interval since the most recent modification date
and the owner is the user identity responsible for the most recent change to that line.
.br

Line coverage overall totals and counts for each of the 12 classification categories are
collected for each of the specified age ranges (see the
.B \-\-date\-bins
option, below).

.SS Script conventions

Some
.B genhtml
options expect the name of an external script or tool as argument. These
scripts are then run as part of the associated function. This includes the
following options:

.RS
.B \-\-annotate\-script
.br
.B \-\-criteria\-script
.br
.B \-\-version\-script
.br
.B \-\-resolve\-script
.br
.RE

While each script performs a separate function there are some common aspects
in the way these options are handled:

.IP 1. 3
If the callback script name ends in
.B \.pm
then the script is assumed to be a Perl module.
.br
A perl module may offer performance advantages over an external script, as it is compiled once and loaded into the interpreter and because it can load and maintain internal state.
.br
The module is expected to export a method 'new', which is
called with the script name and the script parameters (if any) as arguments.  It is expected to return an object which implements several standard methods:
.br
.I $callback_obj = packagename\-\>new(perl_module_file, args);
.RS 3
.IP version\-script 3
.I $version = $callback_obj->extract_version($source_file_ename);
.br
.I $match = $callback_obj->check_version($old_version, $new_version, $source_file_name);
.br
.RS
.IP $match 3
 is expected to be 1 (true) if the version keys refer to the came file and 0 (false) otherwise.
.PP

.IP $version 3
 is a string representing a unique identifier of the particular version of the file
.PP
.RE

See example implementations
.I $LCOV_HOME/share/lcov/support-scripts/gitversion.pm
and
.I $LCOV_HOME/share/lcov/support-scripts/getp4version.pm.
.PP
.IP annotate\-script 3
.I ($status, $array) = $callback_obj->annotate($source_file_name);
.br
.br
.br

where
.RS
.IP $status 3
 is 0 if the command succeeded and nonzero otherwise.
.I $status
is interpreted in same way as the return code from 'system(..)'
.PP
.IP $array 3
is a list of line data of the form:
.br
.I [$text, $abbrev, $full_name, $when, $changelist].
.PP
.br

and

.IP $text 3
is the source text from the corresponding line (without newline termination)
.PP
.IP $abbrev 3
is the "abbreviated author name" responsible for this line of code.  This is the name that will be used in the various HTML tables.  For example, for brevity/readability, you may want to strip the domain from developers who are inside your organization.  If there is no associated author, then the value should be
.I \"NONE\".
.PP
.IP $full_name 3
is the "full author name" which is used in annotation tooltips.  See the
.I genhtml_annotate_tooltip
entry in man
.B lcovrc(5).
.I $fullname
may be
.I undef
if the full name and abbreviated names are the same.
.PP
.IP $when 3
is the timestamp associated with the most recent edit of the corresponding
line and may be
.I \"NONE\"
if there is no associated time.
.PP
.IP $changelist 3
is the commit identifier associated with the most recent change to this line, or
.I \"NONE\"
if there isn't one.
.PP


See example implementations
.I $LCOV_HOME/share/lcov/support-scripts/gitblame.pm
and
.I $LCOV_HOME/share/lcov/support-scripts/p4annotate.pm.
.RE

.IP criteria\-script
.I ($status, $array) = $callback_obj->check_criteria($obj_name, $type, $json);
.br
.br

where
.RS
.IP $obj_name 3
is the source file or directory name, or \"top\" of the object whose coverage criteria is being checked.
.PP
.IP $type 3
is the object type - either
.I \"file\", \"directory\", or \"top\".
.PP
.IP $json 3
is the coverage data associated with this object, in JSON format - see below.
.PP
.IP $status 3
is the return status of the operation, interpreted the same way as the
.I annotate
callback status, described above.
.PP
.IP $array 3
is a reference to a possibly empty list of strings which will be reported by genhtml.  The strings are are expected to explain why the coverage criteria failed.
.PP

See example implementations
.I $LCOV_HOME/share/lcov/support-scripts/criteria.pm.
.RE

.IP resolve\-script
$newpath = $callback_obj->resolve($source_file_name)
.br
.br

where
.I $newpath
is the correct path to the indicated source file or
.I undef
if the source file is not found by the callback.
.PP

.RE

.IP 2. 3
If an option is specified only once, the argument specifies the full command
line that
.B genhtml
passes to a shell interpreter to run the script.
This includes the script path followed by optional additional parameters
separated by spaces. Care must be taken to provide proper quoting if script
path or any parameter contains spaces or shell special characters.
.br
If your callback command contains spaces which are not option separator, then
the callback and arguments must be specified as described in
.B 3.,
below.
.PP

.IP 3. 3
If an option is specified multiple times, the first invocation specifies the
script path and any further invocation specifies one additional parameter.
In this case, genhtml takes care of quoting of spaces contained in
script location and additional parameters.
.br
.PP

.IP 4. 3
.B genhtml
passes any additional parameters specified via option arguments
between the script path and the parameters required by the script's function.
.br
.PP

Example:
.br

.RS
genhtml --annotate-script /bin/script.sh
.br
        --annotate-script "full" ...
.br

results in the same callback as

.br
genhtml --annotate-script "/bin/script.sh full" ...
.br

Note that the former is preferred.

.RE

The resulting
.B genhtml
callback executes the command line:
.br

.RS
/bin/script.sh "full"
.I source_file_name
.RE
.br

Similarly
.br
.RS
genhtml --annotate-script
.I /bin/myMoodule.pm
.br
        --annotate-script "full" ...
.br
.br
.RE

results in
.B genhtml
executing
.br

.RS
$annotateCallback = myModule->new("full");
.RE

to initialize the class ojbect, and then to execute

.RS
($status, $arrayRef) = $annotateCallback(
.I source_file_name
);
.RE

to retrieve the annotation information.


Note that multiple instances of each script may execute simultaneously if the
.B \-\-parallel
option was specified. Therefore each script must either be reentrant or should arrange for its own synchronization, if necessary.
.br
In particular, if your callback is implemented via a perl module:
.IP \- 3
the class object associated with the module will intialized once (in the parent process)
.PP
.IP \- 3
The callback will occur in the child process (possibly simultaneously with other child processes).
.PP
As a result:  if your callback needs to pass data back to the parent, you will need to arrange a communication mechanism to do so.
.br

.SS Additional considerations

If the
.B \-\-criteria\-script
option is used, genhtml will use the referenced script to determine whether your coverage criteria have been met - and will return a non\-zero status and print a message if the criteria are not met.
.br

The
.B \-\-version\-script
option is used to verify that the same/compatible source code versions are displayed as were used to capture coverage data, as well as to verify that the same source code was used to capture coverage information which is going to be merged and to verify that the source version used for filtering operations is compatible with the version used to generate the data.

HTML output files are created in the current working directory unless the
.B \-\-output\-directory
option is used. If
.I tracefile
or
.I baseline\-file
ends with ".gz", it is assumed to be GZIP\-compressed and the gunzip tool
will be used to decompress it transparently.

Note that all source code files have to be present and readable at the
exact file system location they were compiled, and all path references in the input data ".info" and "diff" files must match exactly (i.e., exact string match).
.br

Further, the
.BR \-\-version\-script ", " \-\-annotate\-script ", and " \-\-criteria\-script " scripts "
use the same path strings. However, see the
.B \-\-substitute
and
.B \-\-resolve\-script
options for a mechanism to adjust extracted paths so they match your source and/or revision control layout.

.br
You can use the
.BR check_exisitence_before_callback
configuration option to tell the tool to check that the file exists before
calling the
.BR \-\-version\-script
or
.BR \-\-annotate\-script
callback. See man
.B lcovrc(5)
for details.
.br

.SS Additional options

Use option
.B \-\-diff\-file
to supply a unified diff file that represents the changes to the source
code files between the version used to compile and capture the baseline
trace files, and the version used to compile and capture the current
trace files.

Use option
.B \-\-css\-file
to modify layout and colors of the generated HTML output. Files are
marked in different colors depending on the associated coverage rate.
.br

By default, the coverage limits for low, medium and high coverage are set to
0\-75%, 75\-90% and 90\-100% percent respectively. To change these
values, use configuration file options.
.br

.RS
.IR genhtml_hi_limit " and " genhtml_med_limit
.RE
.br

or type-specific limits:
.br

.RS
.IR genhtml_line_hi_limit " and " genhtml_line_med_limit
.br
.IR genhtml_branch_hi_limit " and " genhtml_branch_med_limit
.br
.IR genhtml_function_hi_limit " and " genhtml_function_med_limit
.br
.RE

See man
.B lcovrc(5)
for details.

Also note that when displaying percentages, 0% and 100% are only printed when
the values are exactly 0% and 100% respectively. Other values which would
conventionally be rounded to 0% or 100% are instead printed as nearest
non\-boundary value. This behavior is in accordance with that of the
.BR gcov (1)
tool.

By default,
.B genhtml
reports will include both line and function coverage data.
Branch data is not displayed by default; you can use the
.B --branch-coverage
option to enable branch coverage - or you can permanently enable branch coverage by adding the appropriate
settings to your personal, group, or site lcov configuration file.  See man
.B lcovrc(5)
for details.


.SH OPTIONS
.B \-h
.br
.B \-\-help
.RS
Print a short help text, then exit.

.RE
.B \-\-version
.RS
Print version number, then exit.

.RE
.B \-v
.br
.B \-\-verbose
.RS
Increment informational message verbosity.  This is mainly used for script and/or flow debugging - e.g., to figure out which data files are found, where.
Also see the \-\-quiet flag.

.RE
.B \-q
.br
.B \-\-quiet
.RS
Decrement informational message verbosity.

Decreased verbosity will suppress 'progress' messages for example - while error and warning messages will continue to be printed.

.RE
.B \-\-debug
.RS
Increment 'debug messages' verbosity.  This is useful primarily to developers who want to enhance the lcov tool suite.

.RE
.B \-\-flat
.br
.B \-\-hierarchical
.RS
Use the specified HTML report hierarchy layout.
.br

The default HTML report is 3 levels:

.RS
.B 1. top\-level:
table of all directories,
.br

.B 2. directory:
table of source files in a directory, and

.B 3. source file detail:
annotated source code.
.br
.RE

Option
.B \-\-hierarchical
produces a multilevel report which follows the directory structure of the
source code (similar to the file tool in Microsoft Windows).

Option
.B \-\-flat
produces a two-level HTML report:

.RS
.B 1. top\-level:
table of all project source files, and
.br

.B 2. source file detail:
annotated source code.
.br
.RE

Only one of options
.B \-\-flat
and
.B \-\-hierarchical
can be specified at the same time.

These options can also be persistently set via the lcovrc configuration file
using either:
.br

.RS
.I genhtml_hierarchical
= 1
.br
.RE

or
.br

.RS
.I genhtml_flat_view
= 1
.br
.RE

See man
.B lcovrc(5)
for details.

.RE
.B \-f
.br
.B \-\-frames
.RS
Use HTML frames for source code view.

If enabled, a frameset is created for each source code file, providing
an overview of the source code as a "clickable" image. Note that this
option will slow down output creation noticeably because each source
code character has to be inspected once. Note also that the GD.pm Perl
module has to be installed for this option to work (it may be obtained
from http://www.cpan.org).

This option can also be controlled from the
.I genhtml_frames
entry of the
.B lcovrc
file.

Please note that there is a bug in firefox and in chrome, such that
enabling frames will disable hyperlinks from the 'directory' level summary
table entry to the first line in the corresponding file in the particular
category - e.g., to the first 'MIS' line (vanilla coverage report - see the
.i \-\-show\-navigation
option, below), to
the first 'UNC' branch (differential coverage repot), etc.
Hyperlinks from the summary table at the top of the 'source detail' page are not affected.

.RE
.B \-s
.br
.B \-\-show\-details
.RS
Generate detailed directory view.

When this option is enabled,
.B genhtml
generates two versions of each
file view. One containing the standard information plus a link to a
"detailed" version. The latter additionally contains information about
which test case covered how many lines of each source file.

.RE
.BI "\-b " baseline\-file\-pattern
.br
.BI "\-\-baseline\-file " baseline\-file\-pattern
.RS
Use data in the files found from glob pattern
.I baseline\-file\-pattern
as coverage baseline.

.B \-\-baseline\-file
may be specified multiple times - for example, if you have multiple trace data files for each of several test suites and you do not want to go through the additional step of merging all of them into a single aggregated data file.

The coverage data files specified by
.I baseline\-file\-pattern
is read and used as the baseline for classifying the change in coverage represented by the coverage counts in
.IR tracefile\-patterns .

In general, you should specify a diff file in unified diff format via
.B \-\-diff\-file
when you specify a
.IR \-\-baseline\-file\-pattern .
Without a diff file, genhtml will assume that there are no source differences
between 'baseline' and 'current'.
For example:  this might be used to find
incremental changes caused by the addition of more testcases, or to compare
coverage results between gcc versions, or between gcc and llvm.

.RE
.BI "\-\-baseline\-title " title
.RS
Use
.I title
as the descriptive label text for the source of coverage baseline data.

.RE
.BI "\-\-baseline\-date " date
.RS
Use
.I date
as the collection date in text format for the coverage baseline data.
If this argument is not specified, the default is to use the creation time of the first file matched by
.I baseline\-file\-pattern
as the baseline date.  If there are multiple baseline files, then the creation date of the first file is used.

.RE
.BI "\-\-current\-date " date
.RS
Use
.I date
as the collection date in text format for the coverage baseline data.
If this argument is not specified, the default is to use the creation time of the current
.IR tracefile .

.RE
.BI "\-\-diff\-file " diff\-file
.RS
Use the
.I diff\-file
as the definition for source file changes between the sample points for
.I baseline\-file\-pattern
and
.IR tracefile(s) .
.br

A suitable
.I diff\-file
can be generated using the command:
.br

.RS
git diff \-\-relative <SHA_base> <SHA_current>
.RE

or using the "p4udiff" or "gitdiff" sample scripts that are provided as part of this package in the following locations:
.br

.RS
\*[scriptdir]/p4udiff
.br
.RE

and

.RS
\*[scriptdir]/gitdiff
.br
.RE

.B p4udiff
accepts either a changelist ID or the literal string "sandbox"; "sandbox" indicates that there are modified files which have not been checked in.

These scripts post\-process the 'p4' or 'git' output to (optionally) remove files that are not of interest and to explicitly note files which have not changed.  It is useful to note unchanged files denoted by lines of the form:
.br

.RS
diff [optional header strings]
.br
=== file_path
.RE
.br

in the p4diff/gitdiff output as this knowledge will help to suppress spurious 'path mismatch' warnings.  See the
.B \-\-elide\-path\-mismatch
option, below.

In general, you will specify
.B \-\-baseline\-file
when you specify
.BR \-\-diff\-file .
The
.I baseline_files
are used to compute coverage differences (
.I e.g.
gains and losses) between the baseline and current, where the
.I diff_file
is used to compute code changes:  source text is
identical between 'baseline' and 'current'.
If you specify
.I baseline_files
but no
.I diff_file,
the tool will assume that there are no code changes between baseline and current.
If you specify a
.I diff_file
but no
.I baseline_files,
the tool will assume that there is no baseline coverage data (no baseline code was covered); as result unchanged code (
.I i.e.,
which does not appear in the
.I diff_file
will be categorized as eiher GIC (covered) or UIC (not covered) while new or chagned code will be categorized as either GNC or UNC.

.RE
.BI "\-\-annotate\-script " script
.RS
Use
.I script
to get source code annotation data.

Use this option to specify an external tool or command line that
.B genhtml
can use to obtain source code annotation data such as age and author of the last
change for each source code line.
.br

This option also instructs
.B genhtml
to add a summary table to the HTML report header that shows counts in the various coverage categories, associated with each date bin. In addition, each source code line will show age and owner information.
Annotation data is also used to populate a 'tooltip' which appears when the mouse
hovers over the associated source code.  See the
.I genhtml_annotate_tooltip
entry in man
.B lcovrc(5)
for details.
.br

The specified
.I script
is expected to obtain age and ownership information
for each source code line from the revision management system and to output
this information in the format described below.
.br

If the annotate script fails and annotation errors are ignored via
.BR --ignore-errors ,
then
.B genhtml
will try to load the source file normally.  If the file is not present or not readable, and the
.B \-\-synthesize\-missing
flag is specified, then
.B genhtml
will synthesize fake data for the file.
.br

.B genhtml
will emit an error if you have specified an annotation script but no files are
successfully annotated (see below).
This can happen, for example, if your P4USER, P4CLIENT,
or P4PORT environment variables are not set correctly -
.I e.g. if the
Jenkins user who generates coverage reports is not the same and the user
who checked out the code and owns the sandbox.
.br

Sample annotation scripts for Perforce ("p4annotate") and git ("gitblame")
are provided as part of this package in the following locations:
.br

.RS
\*[scriptdir]/p4annotate
.br
.RE

and
.br

.RS
\*[scriptdir]/gitblame
.br
.RE

Note that these scripts generate annotations from the file version checked in to the repository - not the locally modified file in the build directory.  If you need annotations for locally modified files, you can shelve your changes in P4, or check them in to a local branch in git.

.B "Creating your own script"
.br

When creating your own script, please first see
.B "Script considerations"
above for general calling conventions and script requirements.
.br

.I script
is called by genhtml with the following command line:

.RS
.B script
.I "[additional_parameters] " source_file_name
.RE
.br

where

.RS
.B script
.br
.RS
is the script executable
.br
.RE

.B additional_parameters
.br
.RS
includes any optional parameters specified (see
.B "Script conventions"
above)
.br
.RE

.B source_file_name
.br
.RS
is the source code file name
.br
.RE
.RE

The
.I script
executable should output a line to the standard output stream in the following format for each line in file
.IR source_file_name :
.br

.RS
.IR commit_id | author_data | date | source_code
.br
.RE

where

.RS
.B commit_id
.br
.RS
is an ID identifying the last change to the line or NONE if this file is not
checked in to your revision control system.
.br
.B genhtml
counts the file as not 'successfully annotated' if
.B commit_id
is
.I NONE
and as 'successfully annotated' otherwise.
.br
.RE
.br

.B author_data
.br
.RS
identifies the author of the last change.
.br
For backward compatibility with existing annotate-script implementations,
two
.I author_data
formats are supportd:
.IP - 3
.I string
:  the string used as both the 'abbreviated name' (used as 'owner' name in
HTML output and callbacks) and as 'full name' (used in tooltip callbacks)
.PP
.IP - 3
.I abbrev_string;full_name
: the
.I author_data
string contains both an 'abbreviated name' and a 'full name' - separated by a semicolon character (';').
.br
This is useful when generating coverage reports for opensource software
components where there are many 'External' contributors who you do not want
to distinguish in 'owner' summary tables but you still want to know who the
actual author was.  (See the
.B gitblame
callback script for an example.)
.PP
.br
.RE
.br

.B date
.br
.RS
is the data of last change in W3CDTF format (<YYYY>-<MM>-<DD>T<hh>:<mm>:<ss><TZD>)
.br
.RE
.br

.B source_code
.br
.RS
is the line's source code
.br
.RE
.br
.RE

The script should return 0 (zero) if processing was successful and non\-zero if it encountered an error.
.br

.RE
.BI "\-\-criteria\-script " script
.RS
Use
.I script
to test for coverage acceptance criteria.
.br

Use this option to specify an external tool or command line that
.B genhtml
can use to determine if coverage results meet custom acceptance criteria.
Criteria checking results are shown in the standard output log of
.BR genhtml .
If at least one check fails,
.B genhtml
will exit with a non-zero exit code after completing its processing.
.br

A sample coverage criteria script is provided as part of this package in the
following location:

.RS
\*[scriptdir]/criteria
.br
.RE

The sample script checks that top\-level line coverage meets the criteria "UNC + LBC + UIC == 0" (added code and newly activated code must be tested, and existing tested code must not become untested).
.br

As another example, it is possible to create scripts that mimic the
.B "lcov \-\-fail\-under\-lines"
feature by checking that the ratio of exercised lines to total lines ("(GNC + GIC + CBC) / (GNC + GIC + CBC + UNC + UIC + UBC)") is greater than the threshold - either only at the top level, in every directory, or wherever desired. Similarly, criteria may include branch and function coverage metrics.
.br

By default the criteria script is called for all source code hierarchy levels, i.e.: top-level, directory, and file-level. The
.I criteria_callback_levels
configuration file option can be used to limit the hierarchy levels to any combination of 'top', 'directory', or 'file' levels.
.br

Example:
.br

.RS
genhtml --rc criteria_callback_levels=directory,top ...
.br
.RE

You can increase the amount of data passed to the criteria script using
configuration file option
.IR criteria_callback_data .
By default, only total counts are included. Specifying "date" adds per
date-bin counts, "owner" adds per owner-bin counts.
.br

Example:
.br

.RS
genhtml --rc criteria_callback_data=date,owner ...
.br
.RE

See man
.B lcovrc(5)
for more details.

.B "Creating your own script"
.br

When creating your own script, please first see
.B "Script considerations"
above for general calling conventions and script requirements.
.br

.I script
is run with the following command line for each source code file,
leaf-directory, and top-level coverage results:

.RS
.B script
.I "[additional_parameters] " "name " " type"
.I "json_data"
.br
.RE

where

.RS
.B script
.br
.RS
is the script executable
.br
.RE

.B additional_parameters
.br
.RS
includes any optional parameters specified (see
.B "Script conventions"
above)
.br
.RE

.B name
.br
.RS
is the name of the object for which coverage criteria should be checked,
that is either the source code file name, directory name, or "top" if the
script is called for top-level data
.br
.RE

.B type
.br
.RS
is the type of source code object for which coverage criteria should be
checked, that is one of "file", "directory", or "top"
.br
.RE

.B json_data
.br
.RS
is a JSON representation of coverage data for the corresponding source code
object
.br
.RE
.RE

The JSON data format is defined as follows:
.br

{
.br
  "<type>": {
.br
    "found": <count>,
.br
    "hit": <count>,
.br
    "<category>": <count>,
.br
    ...
.br
  },
.br
  "<bin_type>": {
.br
    "<bin_id>" : {
.br
      "found": <count>,
.br
      "hit": <count>,
.br
      "<category>": <count>,
.br
      ...
.br
    },
.br
    ...
.br
  },
.br
  ...
.br
}
.br

where

.RS
.B type
.br
.RS
specifies the type of coverage as one of "line", "function", or "branch"
.br
.RE

.B bin_type
.br
.RS
specifies the type of per-bin coverage as one of "line_age", "function_age", or "branch_age" for date-bin data, and "line_owners" or "branch_owners" for owner-bin data
.br
.RE

.B bin_id
.br
.RS
specifies the date-bin index for date-bin data, and owner ID for owner-bin data.
.br
.RE

.B found
.br
.RS
defines the number of found lines, functions, or branches
.br
.RE

.B hit
.br
.RS
defines the number of hit lines, functions, or branches
.br
.RE

.B category
.br
.RS
defines the number of lines, functions, or branches that fall in the specified
category (see
.B "Differential coverage"
above)
.br
.RE

.RE

Note that data is only reported for non-empty coverage types and bins.
.br

The script should return 0 (zero) if the criteria are met and non\-zero otherwise.
.br

If desired, it may print a single line output string which will be appended to the error log if the return status is non\-zero.  Additionally, non\-empty lines are appended to the genhtml standard output log.
.br

.RE

.B \-\-version\-script
.I script
.br
.RS
Use
.I script
to get source code file version data.

Use this option to specify an external tool or command line that
.B genhtml
can use to obtain a source code file's version ID when generating HTML or
applying source filters (see
.B \-\-filter
option).
.br

A version ID can be a file hash or commit ID from revision control. It is used to check the version of the source file which is loaded against the version which was used to generate coverage data (i.e., the file version seen by lcov/geninfo). It is important that source code versions match - otherwise inconsistent or confusing results may be produced.
.br

Version mismatches typically happen when the tasks of capture, aggregation, and report generation are split between multiple jobs - e.g., when the same source code is used in multiple projects, a unified/global coverage report is required, and the projects accidentally use different revisions.
.br

If your .info (coverage data) file does not contain version information - for example, because it was generated by a tool which did not support versioning - then you can use the
.I compute_file_version " = 1"
config file option to generate the data afterward.  A convenient way to do this might be to use
.B lcov
.I \-\-add\-tracefile
to read the original file, insert version information, and write out the result.
See man
.B lcovrc(5)
for more details.


Sample scripts for Perforce ("getp4version"), git ("gitversion") and using an md5 hash ("get_signature") are provided as part of this package in the following locations:
.br

.RS
.I \*[scriptdir]/getp4version
.RE
.br

.RS
.I \*[scriptdir]/gitversion
.RE
.br

and
.br

.RS
.I \*[scriptdir]/get_signature
.RE
.br

Note that you must use the same script/same mechanism to determine the file version when you extract, merge, and display coverage data - otherwise, you may see spurious mismatch reports.
.br

.B "Creating your own script"
.br

When creating your own script, please first see
.B "Script considerations"
above for general calling conventions and script requirements.
.br

.I "script "
is used both to generate and to compare the version ID to enable retaining history between calls or to do more complex processing to determine equivalence.
It will be called by
.B genhtml
with either of the following command lines:
.br

1. Determine source file version ID
.br

.RS
.BI script " source_file_name"
.RE
.br

It should write the version ID of
.I " source_file_name "
to stdout and return a 0 exit status.
If the file is not versioned, it should write an empty string and return a 0 exit status.
.br

2. Compare source file version IDs

.RS
.B script \-\-compare
.I " source_file_name source_file_id"
.br
.I "                  info_file_id"
.br

.RE
where
.RS
.br

.B "source_file_name"
.RS
is the source code file name
.RE
.br

.B "source_file_id "
.RS
is the version ID returned by calling "script source_file_name"
.RE
.br

.B "info_file_id "
.RS
is the version ID found in the corresponding .info file
.RE
.RE
.br

It should return non\-zero if the IDs do not match.
.br

.RE

.B \-\-resolve\-script
.I script
.br
.RS
Use
.I script
to find the file path for some source file which which appears in
an input data file if the file is not found after applying
.I \-\-substitute
patterns and searching the
.I \-\-source\-directory
list.  This option is equivalent to the
.B resolve_script
config file option. See man
.B lcovrc(5)
for details.
.RE

.BI "\-\-checksum "
.RS
Specify whether to compare stored tracefile checksum to checksum computed from the source code.

Checksum verification is
.B disabled
by default.

When checksum verification is enabled, a checksum will be computed for each source
code line and compared to the checksum found in the 'current' tracefile.
This will help to prevent attempts to display source code which is not identical
to the code used to generate the coverage data.

Note that this option is somewhat subsumed by the
.B \-\-version\-script
option - which does something similar, but at the 'whole file' level.

.RE
.B \-\-new\-file\-as\-baseline
.RS
By default, when code is identified on source lines in the 'current' data which were not identified as code in the 'baseline' data, but the source text has not changed, their coverpoints are categorized as "included code":
.I GIC
or
.I UIC.
.br

However, if the configuration of the coverage job has been recently changed to instrument additional files, then all un\-exercised coverpoints in those files will fall into the
.I GIC
category - which may cause certain coverage criteria checks to fail.
.br

When this option is specified, genhtml pretends that the baseline data for the file is the same as the current data - so coverpoints are categorized as
.I CBC
or
.I UBC
which do not trigger the coverage criteria check.

Please note that coverpoints in the file are re\-categorized only if:

.RS
.IP \(bu 3
There is no 'baseline' data for any coverpoint in this file, AND
.PP
.IP \(bu 3
The file pre\-dates the baseline:  the oldest line in the file is older than the 'baseline' data file (or the value specified by the
.B \-\-baseline\-date
option).
.PP
.RE

.RE
.BI "\-\-elide\-path\-mismatch"
.RS
Differential categorization uses file pathnames to match coverage entries from the ".info" file with file difference entries in the unified\-diff\-file.  If the entries are not identical, then categorization may be incorrect or strange.

When paths do not match, genhtml will produce "path" error messages to tell you about the mismatches.

If mismatches occur, the best solution is to fix the incorrect entries in the .info and/or unified\-diff\-file files.  However, fixing these entries is not possible, then you can use this option to attempt to automatically work around them.
.br

When this option is specified, genhtml will pretend that the unified\-diff\-file entry matches the .info file entries if:

.RS
.IP \(bu 3
the same path is found in both the 'baseline' and 'current' .info files, and
.PP
.IP \(bu 3
the basename of the path in the .info file and the path in the unified\-diff\-file are the same, and
.PP
.IP \(bu 3
there is only one unmatched unified\-diff\-file entry with that basename.
.PP
.RE

See the
.B \-\-diff\-file
discussion above for a discussion of how to avoid spurious warnings and/or incorrect matches.

.RE
.BI "\-\-synthesize\-missing"
.RS
Generate (fake) file content if source file does not exist.
This option can be used to work around otherwise fatal annotation errors.

When generating annotated file content,
.B genhtml
assumes that the source was written 'now' (so age is zero), the author is
.I no.body
and the commit ID is
.I synthesized.
These names and ages will appear in your HTML reports.

.RE
.BI "\-\-date\-bins " day[,day,...]
.RS
The
.B \-\-date\-bins
option is used to specify age boundaries (cutpoints) for date\-binning classification.  If not specified, the default is to use 4 age ranges: less than 7 days, 7 to 30 days, 30 to 180 days, and more than 180 days.
This argument has no effect if there is no
.I source\-annotation\-script .

.RE
.BI "\-\-show\-owners " [all]
.RS
If the
.B \-\-show\-owners
option is used, each coverage report header report contain a summary table, showing counts in the various coverage categories for everyone who appears in the revision control annotation as the most recent editor of the corresponding line.  If the optional argument 'all' is not specified, the table will show only users who are responsible for un\-exercised code lines.  If the optional argument is specified, then users responsible for any code lines will appear.  In both cases, users who are responsible for non\-code lines (e.g, comments) are not shown.
This option does nothing if
.B \-\-annotate\-script
is not used; it needs revision control information provided by calling the script.

Please note: if the
.I all
option is not specified, the summary table will contain "Total" rows for all date/owner bins which are not empty - but there will be no secondary "File/Directory" entries for elements which have no "missed" coverpoints.

.RE
.BI "\-\-show\-noncode "
.RS
By default, the source code detail view does not show owner or date annotations in the far-left column for non\-code lines (e.g., comments). If the
.B \-\-show\-noncode
option is used, then the source code view will show annotations for both code and non\-code lines.
This argument has no effect if there is no
.I source\-annotation\-script .

.RE
.BI "\-\-show\-zero\-columns "
.RS
By default, columns whose entries are all zero are removed (not shown) in the summary table at the top of each HTML page.
If the
.B \-\-show\-zero\-columns
option is used, then those columns will be shown.

When columns are retained, then all the tables have the same width/contain the same number of columns - which may be a benefit in some situations.

When columns are removed, then the tables are more compact and easier to read.
This is especially true in relatively mature development environments, when there are very few un-exercised coverpoints in the project.

.RE
.BI "\-\-show\-navigation "
.RS
By default, the summary table in the source code detail view does not contain hyperlinks from the number to the first line in the corresponding category ('Hit' or 'Missed') and from the current location to the next location in the current category, in non-differential coverage reports.  (This is the lcov 'legacy' view non-differential reports.)

If the
.B \-\-show\-navigation
option is used, then the source code summary table will be generated with navigation links.
Hyperlinks are always generated for differential coverage reports.

This feature enables developers to find and understand coverage issues more quickly than they might otherwise, if they had to rely on scrolling.

See the
.I \-\-frames
description above for a description of a browser bug which disables
these hyperlinks in certain conditions.

Navigation hyperlinks are always enabled in differential coveage report.

.RE
.BI "\-\-show\-proportions "
.RS
In the 'function coverage detail' table, also show the percentage of lines and branches within the function which are exercised.

This feature enables developers to focus attention on functions which have the largest effect on overall code coverage.

This feature is disabled by default.
Note that this option requires that you use a gcc version which is new enough to support function begin/end line reports or that you configure the tool to derive the required dta - see the
.BI derive_function_end_line
discussion in man
.B lcovrc(5).


.RE
.BI "\-\-simplified\-colors "
.RS
By default, each differential category is colorized uniquely in the source code detail view.  With this option, only two colors are used:  one for covered code and another for uncovered code.  Note that ECB and EUB code is neither covered nor uncovered - and so may be difficult to distinguish in the source code view, as they will be presented in normal background color.

.RE
.BI "\-\-exclude "
.I pattern
.RS
pattern is a glob\-match pattern of filenames to exclude from the report.
Files which do NOT match will be included.
See the lcov man page for details.

.RE
.BI "\-\-include "
.I pattern
.RS
pattern is a glob\-match pattern of filenames to include in processing.
Files which do not match will be excluded from the report.
See the lcov man page for details.
.RE

.B \-\-erase\-functions
.I regexp
.br
.RS
Exclude coverage data from lines which fall within a function whose name matches the supplied regexp.  Note that this is a mangled or demangled name, depending on whether the
.B \-\-demangle\-cpp
option is used or not.

Note that this option requires that you use a gcc version which is new enough to support function begin/end line reports or that you configure the tool to derive the required dta - see the
.BI derive_function_end_line
discussion in man
.B lcovrc(5).


.RE
.B \-\-substitute
.I regexp_pattern
.br
.RS
Apply Perl regexp
.IR regexp_pattern
to source file names found during processing.  This is useful when some file paths in the baseline or current .info file do not match your source layout and so the source code is not found.
See the lcov man page for more details.

Note that the substitution patterns are applied to the
.IR \-\-diff\-file
entries as well as the baseline and current .info files.
.RE

.B \-\-omit\-lines
.I regexp_pattern
.br
.RS
Exclude coverage data from lines whose content matches
.IR regexp .

Use this switch if you want to exclude line and branch coverage data for some particular constructs in your code (e.g., some complicated macro).
See the lcov man page for details.

.RE
.BI "\-\-parallel "
.I [ integer ]
.br
.BI "\-j "
.I [ integer ]
.RS
Specify parallelism to use during processing (maximum number of forked child processes).  If the optional integer parallelism parameter is zero or is missing, then use to use up the number of cores on the machine.  Default is not to use a single process (no parallelism).

.RE
.BI "\-\-memory "
.I integer
.RS
Specify the maximum amount of memory to use during parallel processing, in Mb.  Effectively, the process will not fork() if this limit would be exceeded.  Default is 0 (zero) - which means that there is no limit.

This option may be useful if the compute farm environment imposes strict limits on resource utilization such that the job will be killed if it tries to use too many parallel children - but the user does not know a priori what the permissible maximum is.  This option enables the tool to use maximum parallelism - up to the limit imposed by the memory restriction.

The configuration file
.I memory_percentage
option provided another way to set the maximum memory consumption.
See man
.B lcovrc (5)
for details.


.RE
.BI \-\-filter " filters"
.RS
Specify a list of coverpoint filters to apply to input data.

Note that certain filters apply only to C/C++ source files.
.B genhtml
associates the file extension ('.c', '.vhd', 
.I etc.
) with its source langage.  See the
.I c_file_extentions
and
.I rtl_file_extensions
sections of man
.B lcovrc(5)
for a description of the default associations and how they can be changed.

.I filters
can be a comma\-separated list of the following keywords:

.IP branch: 3
ignore branch counts for C/C++ source code lines which do not appear to contain conditionals.  These may be generated automatically by the compiler (e.g., from C++ exception handling) - and are not interesting to users.
This option has no effect unless
.B \-\-branch\-coverage
is used.

See also man
.B lcovrc(5)
- which describes several variables which affect branch filtering:
.I filter_lookahead
and
.I filter_bitwise_conditional.

The most common use for branch filtering is to remove compiler-generated branches related to C++ exception handlers.  See the no_exception_branch' option in man
.B lcovrc(5)
for a way to remove all identified exception branches.
.PP

.IP brace: 3
ignore line coverage counts on the closing brace of C/C++ code block, if the line contains only a closing brace and the preceding line has the same count or if the close brace has a zero count and either the preceding line has a non\-zero count, or the close brace is not the body of a conditional.

These lines seem to appear and disappear in gcov output - and cause differential coverage to report bogus LBC and/or GIC and/or UIC counts.  Bogus LBC or UIC counts are a problem because an automated regression which uses pass criteria "LBC + UIC + UNC == 0" will fail.
.PP

.IP blank: 3
ignore lines which contain only whitespace (or whitespace + comments) whose 'hit' count is zero.  These appear to be a 'gcov' artifact related to compiler-generated code - such as exception handlers and destructor calls at the end of scope - and can confuse differential coverage criteria.
.PP

.IP range: 3
Ignore line and branch coverpoints on lines which are out-of range/whose line number is beyond the end of the source file.  These appear to be gcov artifacts caused by a macro instantiation on the last line of the file.
.B line:
alias for "\-\-filter brace,blank".
.PP

.IP region: 3
apply LCOV_EXCL_START/LCOV_EXCL_STOP directives found in source text to the coverpoints found in the current and baseline .info files.
This option may be useful in cases that the source code was not found during 'lcov \-\-capture ...' but is accessible now.
.PP

.IP branch_region: 3
apply LCOV_EXCL_BR_START/LCOV_EXCL_BR_STOP directives found in source text to the coverpoints found in the current and baseline .info files.
This is similar to the 'region option, above - but applies to branch coverpoints only.
.PP

.IP function: 3
combine data for every "unique" function which is defined at the same file/line.
.I geninfo/gcov
seem to have a bug such that they create multiple entries for the same function.
This feature also merges all instances of the same template function/template method.
.PP

.IP trivial: 3
remove trivial functions and associated coverpoints.  'Trivial' functions are
whose body is empty/do not contain any statements.  Commonly, these include compiler-generated methods (e.g., default constructors and assignment operators) as well as static initialization wrappers, etc.

Note that the
.I trivial
filter requires function end line information - and so requires that you use a compiler veraion which is new enough to support begin/end line reports
(
.I e.g.,
gcc/9 or newer) or that you enable lcov/genhtml/geninfo to derive the information:

In man
.B lcovrc(5),
see the
.I derive_function_end_line
setting as well as the
.I trivial_function_threshold
setting.  The former is used to turn end line calculation on or off,
and the latter to change the lookahead used to determine whether the
function body is empty.
Also see the
.I lcov_filter_parallel
and
.I lcov_filter_chunk_size
settings, which may improve CPU performance if the number of files to process is very large.
.PP

.RE
.BI "\-o " output\-directory
.br
.BI "\-\-output\-directory " output\-directory
.RS
Create files in
.I output\-directory.

Use this option to tell
.B genhtml
to write the resulting files to a directory other than
the current one. If
.I output\-directory
does not exist, it will be created.

It is advisable to use this option since depending on the
project size, a lot of files and subdirectories may be created.

.RE
.BI "\-t " title
.br
.BI "\-\-title " title
.RS
Display
.I title
in header table of all pages.

.I title
is written to the "Test:"-field in the header table at the top of each
generated HTML page to identify the context in which a particular output
was created. By default, this is the name of the 'current; tracefile.

A common use is to specify a test run name, or a version control system
identifier (perforce changelist or git SHA, for example) that indicates
the code level that was tested.

.RE
.BI "\-\-header\-title " BANNER
.RS
Display
.I BANNER
in header of all pages.

.I BANNER
is written to the header portion of each generated HTML page.
By default, this
simply identifies this as an LCOV (differential) coverage report.

A common use is to specify the name of the project or project branch and the
Jenkins build ID.

.RE
.BI "\-\-footer " FOOTER
.RS
Display
.I FOOTER
in footer of all pages.

.I FOOTER
is written to the footer portion of each generated HTML page.
The default simply identifies the LCOV tool version used to generate the report.

.RE
.BI "\-d " description\-file
.br
.BI "\-\-description\-file " description\-file
.RS
Read test case descriptions from
.IR description\-file .

All test case descriptions found in
.I description\-file
and referenced in the input data file are read and written to an extra page
which is then incorporated into the HTML output.

The file format of
.IR "description\-file " is:

for each test case:
.RS
TN:<testname>
.br
TD:<test description>

.RE

Valid test case names can consist of letters, numbers and the underscore
character ('_').
.RE
.br

.B \-k
.br
.B \-\-keep\-descriptions
.RS
Do not remove unused test descriptions.

Keep descriptions found in the description file even if the coverage data
indicates that the associated test case did not cover any lines of code.

This option can also be configured permanently using the configuration file
option
.IR genhtml_keep_descriptions .

.RE
.BI "\-c " css\-file
.br
.BI "\-\-css\-file " css\-file
.RS
Use external style sheet file
.IR css\-file .

Using this option, an extra .css file may be specified which will replace
the default one. This may be helpful if the default colors make your eyes want
to jump out of their sockets :)

This option can also be configured permanently using the configuration file
option
.IR genhtml_css_file .

.RE
.BI "\-\-source\-directory " dirname
.RS
Add 'dirname' to the list of places to look for source files.
.br

For relative source file paths
.I e.g.
paths found in
.IR tracefile,
or in
.IR diff-file
\- possibly after substitutions have been applied -
.B genhtml
will first look for the path from 'cwd' (where genhtml was
invoked) and
then from each alternate directory name in the order specified.
The first location matching location is used.

This option can be specified multiple times, to add more directories to the source search path.


.RE
.BI "\-p " prefix
.br
.BI "\-\-prefix " prefix
.RS
Remove
.I prefix
from all directory names.

Because lists containing long filenames are difficult to read, there is a
mechanism implemented that will automatically try to shorten all directory
names on the overview page beginning with a common prefix. By default,
this is done using an algorithm that tries to find the prefix which, when
applied, will minimize the resulting sum of characters of all directory
names.

Use this option to specify the prefix to be removed by yourself.

.RE
.B \-\-no\-prefix
.RS
Do not remove prefix from directory names.

This switch will completely disable the prefix mechanism described in the
previous section.

This option can also be configured permanently using the configuration file
option
.IR genhtml_no_prefix .

.RE
.B \-\-no\-source
.RS
Do not create source code view.

Use this switch if you don't want to get a source code view for each file.

This option can also be configured permanently using the configuration file
option
.IR genhtml_no_source .

.RE
.BI "\-\-num\-spaces " spaces
.RS
Replace tabs in source view with
.I num
spaces.

Default value is 8.

This option can also be configured permanently using the configuration file
option
.IR genhtml_num_spaces .

.RE
.B \-\-highlight
.RS
Highlight lines with converted\-only coverage data.

Use this option in conjunction with the
.B \-\-diff
option of
.B lcov
to highlight those lines which were only covered in data sets which were
converted from previous source code versions.

This option can also be configured permanently using the configuration file
option
.IR genhtml_highlight .

.RE
.B \-\-legend
.RS
Include color legend in HTML output.

Use this option to include a legend explaining the meaning of color coding
in the resulting HTML output.

This option can also be configured permanently using the configuration file
option
.IR genhtml_legend .

.RE
.BI "\-\-html\-prolog " prolog\-file
.RS
Read customized HTML prolog from
.IR prolog\-file .

Use this option to replace the default HTML prolog (the initial part of the
HTML source code leading up to and including the <body> tag) with the contents
of
.IR prolog\-file .
Within the prolog text, the following words will be replaced when a page is generated:

.B "@pagetitle@"
.br
The title of the page.

.B "@basedir@"
.br
A relative path leading to the base directory (e.g., for locating css\-files).

This option can also be configured permanently using the configuration file
option
.IR genhtml_html_prolog .

.RE
.BI "\-\-html\-epilog " epilog\-file
.RS
Read customized HTML epilog from
.IR epilog\-file .

Use this option to replace the default HTML epilog (the final part of the HTML
source including </body>) with the contents of
.IR epilog\-file .

Within the epilog text, the following words will be replaced when a page is generated:

.B "@basedir@"
.br
A relative path leading to the base directory (e.g., for locating css\-files).

This option can also be configured permanently using the configuration file
option
.IR genhtml_html_epilog .

.RE
.BI "\-\-html\-extension " extension
.RS
Use customized filename extension for generated HTML pages.

This option is useful in situations where different filename extensions
are required to render the resulting pages correctly (e.g., php). Note that
a '.' will be inserted between the filename and the extension specified by
this option.

This option can also be configured permanently using the configuration file
option
.IR genhtml_html_extension .
.RE

.B \-\-html\-gzip
.RS
Compress all generated html files with gzip and add a .htaccess file specifying
gzip\-encoding in the root output directory.

Use this option if you want to save space on your webserver. Requires a
webserver with .htaccess support and a browser with support for gzip
compressed html.

This option can also be configured permanently using the configuration file
option
.IR genhtml_html_gzip .

.RE
.B \-\-sort
.br
.B \-\-no\-sort
.RS
Specify whether to include sorted views of file and directory overviews.

Use
.B \-\-sort
to include sorted views or
.B \-\-no\-sort
to not include them.
Sorted views are
.B enabled
by default.

When sorted views are enabled, each overview page will contain links to
views of that page sorted by coverage rate.

This option can also be configured permanently using the configuration file
option
.IR genhtml_sort .

.RE
.B \-\-function\-coverage
.br
.B \-\-no\-function\-coverage
.RS
Specify whether to display function coverage summaries in HTML output.

Use \-\-function\-coverage to enable function coverage summaries or
\-\-no\-function\-coverage to disable it. Function coverage summaries are
.B enabled
by default.

This option can also be configured permanently using the configuration file
option
.IR genhtml_function_coverage .

When function coverage summaries are enabled, each overview page will contain
the number of functions found and hit per file or directory, together with
the resulting coverage rate. In addition, each source code view will contain
a link to a page which lists all functions found in that file plus the
respective call count for those functions.
The function coverage page groups the data for every alias of each function, sorted by name or execution count.  The representative name of the group of functions is the shorted (i.e., containing the fewest characters).

If using differential coverage and a sufficiently recent gcc version which report both begin and end line of functions (gcc/9 and newer), functions are considered 'new' if any of their source lines have changed.
With older gcc versions, functions are considered 'new' if the function signature has changed or if the entire function is new.

.RE
.B \-\-branch\-coverage
.br
.B \-\-no\-branch\-coverage
.RS
Specify whether to display branch coverage data in HTML output.

Use
.B \-\-branch\-coverage
to enable branch coverage display or
.B \-\-no\-branch\-coverage
to disable it. Branch coverage data display is
.B disabled
by default.

When branch coverage display is enabled, each overview page will contain
the number of branches found and hit per file or directory, together with
the resulting coverage rate. In addition, each source code view will contain
an extra column which lists all branches of a line with indications of
whether the branch was taken or not. Branches are shown in the following format:

 ' + ': Branch was taken at least once
.br
 ' - ': Branch was not taken
.br
 ' # ': The basic block containing the branch was never executed
.br

Note that it might not always be possible to relate branches to the
corresponding source code statements: during compilation, GCC might shuffle
branches around or eliminate some of them to generate better code.

This option can also be configured permanently using the configuration file
option
.IR genhtml_branch_coverage .

.RE
.BI "\-\-demangle\-cpp " [param]
.RS
Specify whether to demangle C++ function names.

Use this option if you want to convert C++ internal function names to
human readable format for display on the HTML function overview page.

If called with no parameters, genhtml will use
.I c++filt
for demangling.  This requires that the c++filt tool is installed (see
.BR c++filt (1)).

If
.I param
is specified, it is treated as th tool to call to demangle source code.
The
.I \-\-demangle\-cpp
option can be used multiple times to specify the demangling tool and a set of
command line options that are passed to the tool - similar to how the gcc
.I -Xlinker
paramter works.  In that case, you callback will be executed as:
.I | demangle_param0 demangle_param1 ...
Note that the demangle tool is called as a pipe and is expected to read from stdin and write to stdout.

.RE
.B \-\-ignore\-errors
.I errors
.br
.RS
Specify a list of errors after which to continue processing.

Use this option to specify a list of error classes after which
.B genhtml
should continue processing with a warning message instead of aborting.
To suppress the warning message, specify the error class twice.
.br

.I errors
can be a comma\-separated list of the following keywords:

.IP annotate: 3
.B \-\-annotate\-script
returned non\-zero exit status - likely a file path or related error.  HTML source code display will not be correct and ownership/date information may be missing.
.PP

.IP branch: 3
Branch ID (2nd field in the .info file 'BRDA' entry) does not follow expected integer sequence.
.PP

.IP callback: 3
Annotate, version, or criteria script error.
.PP

.IP category: 3
Line number categorizations are incorrect in the .info file, so branch coverage line number turns out to not be an executable source line.
.PP

.IP child: 3
child process returned non-zero exit code during
.I \-\-parallel
execution.  This typically indicates that the child encountered an error:  see the log file immediately above this message.
In contrast:  the
.B parallel
error indicates an unexpected/unhandled exception in the child process - not a 'typical' lcov error.
.PP

.IP count: 3
An excessive number of messages of some class has been reported - subsequent messages of that type will be suppressed.
The limit can be controlled by the 'max_message_count' variable. See man
.B lcovrc(5).
.PP

.IP corrupt: 3
Corrupt/unreadable coverage data file found.
.PP

.IP deprecated: 3
You are using a deprecated option.
This option will be removed in an upcoming release - so you should change your
scripts now.
.PP

.IP empty: 3
The patch file specified by the
.B \-\-diff\-file
argument does not contain any differences.  This may be OK if there were no source code changes between 'baseline' and 'current' (e.g., the only change was to modify a Makefile) - or may indicate an unsupported file format.
.PP

.IP excessive: 3
your coverage data contains a suspiciously large 'hit' count which is unlikely
to be correct - possibly indicating a bug in your toolchain.
See the
.I excessive_count_threshold
section in man
.B lcorc(5)
for details.
.PP

.IP format: 3
Unexpected syntax found in .info file.
.PP

.IP inconsistent: 3
Files have been moved or repository history presented by
.B \-\-diff\-file
data is not consistent with coverage data; for example, an 'inserted' line has baseline coverage data.  These issues are likely to be caused by inconsistent handling in the 'diff' and 'annotate' scripts.
.PP

.IP internal: 3
internal tool issue detected.  Please report this bug along with a testcase.
.PP

.IP mismatch: 3
Inconsistent entries found in trace file:

.RS 3
.IP \(bu 3
branch expression (3rd field in the .info file 'BRDA' entry) of merge data does not match, or
.PP
.IP \(bu 3
function execution count (FNDA:...) but no function declaration (FN:...).
.PP
.RE
.PP

.IP missing: 3
File does not exist or is not readable.
.PP

.IP negative: 3
negative 'hit' count found.

Note that negative counts may be caused by a known GCC bug - see

  https://gcc.gnu.org/bugzilla/show_bug.cgi?id=68080

and try compiling with "-fprofile-update=atomic". You will need to recompile, re-run your tests, and re-capture coverage data.
.PP

.IP package: 3
A required perl package is not installed on your system.  In some cases, it is possible to ignore this message and continue - however, certain features will be disabled in that case.
.PP

.IP parallel: 3
various types of errors related to parallelism -
.I i.e.,
a child process died due to an error.  The corresponding error message appears in the log file immediately before the
.I parallel
error.
If you see an error related to parallel execution that seems invalid, it may be a good idea to remove the \-\-parallel flag and try again.  If removing the flag leads to a different result, please report the issue (along with a testcase) so that the tool can be fixed.
.PP

.IP path: 3
File name found in
.B \-\-diff\-file
file but does not appear in either baseline or current trace data.  These may be mapping issues - different pathname in the tracefile vs. the diff file.
.PP

.IP range: 3
Coverage data refers to a line number which is larger than the number of
lines in the source file.  This can be caused by a version mismatch or
by an issue in the
.I gcov
data.
.PP

.IP source: 3
The source code file for a data set could not be found.
.PP

.IP unmapped: 3
Coverage data for a particular line cannot be found, possibly because the source code was not found, or because the line number mapping in the \.info file is wrong.

This can happen if the source file used in HTML generation is not the same as the file used to generate the coverage data - for example, lines have been added or removed.
.PP

.IP unsupported: 3
The requested feature is not supported for this tool configuration.  For example, function begin/end line range exclusions use some GCOV features that are not available in older GCC releases.
.PP

.IP unused: 3
The include/exclude/erase/substitute/omit pattern did not match any file pathnames.
.PP

.IP usage: 3
unsupported usage detected - e.g. an unsupported option combination.
.PP

.IP utility: 3
a tool called during processing returned an error code (e.g., 'find' encountered an unreadable directory).
.PP

.IP version: 3
\-\-version\-script comparison returned non\-zero mismatch indication.  It likely that the version of the file which was used in coverage data extraction is different than the source version which was found.  File annotations may be incorrect.
.PP

Also see 'man 
.B lcovrc(5)
' for a discussion of the 'max_message_count' parameter which can be used to control the number of warnings which are emitted before all subsequent messages are suppressed.  This can be used to reduce log file volume.
.br

.RE
.BI "\-\-keep\-going "
.RS
Do not stop if error occurs: attempt to generate a result, however flawed.

This command line option corresponds to the
.I stop_on_error
lcovrc option.  See man
.B lcovrc(5)
for more details.

.RE

.B \-\-config\-file
.I config\-file
.br
.RS
Specify a configuration file to use.
See man
.B lcovrc(5)
for details of the file format and options.

When this option is specified, neither the system\-wide configuration file
/etc/lcovrc, nor the per\-user configuration file ~/.lcovrc is read.

This option may be useful when there is a need to run several
instances of
.B genhtml
with different configuration file options in parallel.

Note that this option must be specified in full - abbreviations are not supported.

.RE

.B \-\-rc
.IR keyword = value
.br
.RS
Override a configuration directive.

Use this option to specify a
.IR keyword = value
statement which overrides the corresponding configuration statement in
the lcovrc configuration file. You can specify this option more than once
to override multiple configuration statements.
See man
.BR lcovrc (5)
for a list of available keywords and their meaning.
.RE

.BI "\-\-precision " num
.RS
Show coverage rates with
.I num
number of digits after the decimal point.

Default value is 1.

This option can also be configured permanently using the configuration file
option
.IR genhtml_precision .
.RE

.B \-\-suppress\-aliases
.RS
Suppress list of aliases in function detail table.
.br

Functions whose file/line is the same are considered to be aliases;
.B genthml
uses the shortest name in the list of aliases (fewest characters) as the leader.
.br

The number of aliases can be large, for example due to instantiated templates - which can make function coverage results difficult to read.  This option removes the list of aliases, making it easier to focus on the overall function coverage number, which is likely more interesting.

Note that this option has an effect only when
.B \-\-filter
function is applied.

This option can also be configured permanently using the configuration file
option
.IR suppress_function_aliases .
.RE


.B \-\-forget\-test\-names
.br
.RS
If non\-zero, ignore testcase names in .info file -
.I i.e.,
treat all coverage data as if it came from the same testcase.
This may improve performance and reduce memory consumption if user does
not need per-testcase coverage summary in coverage reports.

This option can also be configured permanently using the configuration file
option
.IR forget_testcase_names .
.RE

.B \-\-missed
.RS
Show counts of missed lines, functions, or branches.

Use this option to change overview pages to show the count of lines, functions,
or branches that were not hit. These counts are represented by negative numbers.

When specified together with \-\-sort, file and directory views will be sorted
by missed counts.

This option can also be configured permanently using the configuration file
option
.IR genhtml_missed .
.RE

.B \-\-dark\-mode
.RS
Use a light\-display\-on\-dark\-background color scheme rather than the default dark\-display\-on\-light\-background.

The idea is to reduce eye strain due to viewing dark text on a bright screen - particularly at night.
.RE

.B \-\-tempdir
.I dirname
.br
.RS
Write temporary and intermediate data to indicated directory.  Default is "/tmp".
.RE

.BI "\-\-preserve "
.RS
Preserve intermediate data files generated by various steps in the tool - e.g., for debugging.  By default, these files are deleted.

.RE

.BI "\-\-save "
.RS
Copy
.I unified\-diff\-file, baseline_trace_files,
and
.I tracefile(s)
to
output\-directory.

Keeping copies of the input data files may help to debug any issues or to regenerate report files later.

.RE

.SH FILES

.I /etc/lcovrc
.RS
The system\-wide configuration file.
.RE

.I ~/.lcovrc
.RS
The per\-user configuration file.
.RE

.I \*[scriptdir]/p4udiff
.RS
Sample script for use with
.B --diff-file
that creates a unified diff file via Perforce.
.br
.RE

.I \*[scriptdir]/gitdiff
.RS
Sample script for use with
.B --diff-file
that creates a unified diff file via git.
.br
.RE

.I \*[scriptdir]/p4annotate.pm
.RS
Sample script written as Perl module for use with
.B --annotate-script
that provides annotation data via Perforce.
.br
.RE

.I \*[scriptdir]/gitblame.pm
.RS
Sample script written as Perl module for use with
.B --annotate-script
that provides annotation data via git.
.br
.RE

.I \*[scriptdir]/criteria.pm
.RS
Sample script written as Perl module for use with
.B --criteria-script
that implements a check for "UNC + LBC + UIC == 0".
.br
.RE

.I \*[scriptdir]/getp4version
.RS
Sample script for use with
.B --version-script
that obtains version IDs via Perforce.
.br
.RE

.I \*[scriptdir]/get_signature
.RS
Sample script for use with
.B --version-script
that uses md5hash as version IDs.
.br
.RE


.SH AUTHORS
Peter Oberparleiter <Peter.Oberparleiter@de.ibm.com>
.br

Henry Cox <henry.cox@mediatek.com>
.RS
Differential coverage and date/owner binning, filtering, error management,
parallel execution sections,
.RE
.br

.SH SEE ALSO
.BR lcov (1),
.BR lcovrc (5),
.BR geninfo (1),
.BR genpng (1),
.BR gendesc (1),
.BR gcov (1)
.br

.I \*[lcovurl]
.br
