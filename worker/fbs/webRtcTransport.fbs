include "transport.fbs";
include "sctpParameters.fbs";

namespace FBS.WebRtcTransport;

table ListenIndividual {
  listen_ips:[FBS.Transport.ListenIp] (required);
  port:uint16;
}

table ListenServer {
  web_rtc_server_id:string (required);
}

union Listen {
  ListenIndividual,
  ListenServer,
}

table WebRtcTransportOptions {
  base:FBS.Transport.Options (required);
  listen:Listen (required);
  enable_udp:bool = true;
  enable_tcp:bool = false;
  prefer_udp:bool = false;
  prefer_tcp:bool = false;
}

table Fingerprint {
  algorithm:string (required);
  value:string (required);
}

table DtlsParameters {
  fingerprints:[Fingerprint] (required);
  role:string;
}

table IceParameters {
 username_fragment:string (required);
 password:string (required);
 ice_lite:bool = true;
}

table IceCandidate {
  foundation:string (required);
  priority:uint32;
  ip:string (required);
  protocol:string (required);
  port:uint16;
  type:string;
  tcp_type:string;
}

table ConnectRequest {
  dtls_parameters:DtlsParameters (required);
}

table ConnectResponse {
  dtls_local_role:string (required);
}

table DumpResponse {
  base:FBS.Transport.Dump (required);
  ice_role:string (required);
  ice_parameters:IceParameters (required);
  ice_candidates:[IceCandidate] (required);
  ice_state:string (required);
  ice_selected_tuple:FBS.Transport.Tuple;
  dtls_parameters:DtlsParameters (required);
  dtls_state:string (required);
}

table GetStatsResponse {
  base:FBS.Transport.Stats (required);
  ice_role:string (required);
  ice_state:string (required);
  ice_selected_tuple:FBS.Transport.Tuple;
  dtls_state:string (required);
}

// Notifications from Worker.

table IceSelectedTupleChangeNotification {
  tuple:FBS.Transport.Tuple (required);
}

enum IceState: uint8 { NEW = 0, CONNECTED, COMPLETED, DISCONNECTED, CLOSED }
enum DtlsState: uint8 { NEW = 0, CONNECTING, CONNECTED, FAILED, CLOSED }

table IceStateChangeNotification {
  ice_state:IceState;
}

table DtlsStateChangeNotification {
  dtls_state:DtlsState;
  remote_cert:string;
}
